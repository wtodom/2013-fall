(include "random.lib") ;included for problem 9 

(define (author)
    (println "AUTHOR: Mason Volk mvolk@crimson.ua.edu")
    )

(define (run1)
    (println)
    (println "run1")
    (println "********************")
    (println "first argument: (/ 2 0)")
    (print "result: ")
    (println (check-and-go (/ 2 0) 
            (lambda (error)
                ;(println (cdr error))
                ;(println (get 'code error))
                (cond ((eq? (get 'code error) 'mathException) 1) 
                    (else (throw error)) 
                    ) 
                ) 
            )
        )
    (println "---should be 1")
    (println)
    (println "first argument: (/ 2 1)")
    (print "result: ")
    (println (check-and-go (/ 2 1)
            (lambda (error)
                (cond ((eq? (get 'code error) 'mathExcpetion) 1)
                    (else (throw error))
                    )
                )
            )
        )
    (println "---should be 2")
    (println)
    )

(define (run2)
    (println)
    (println "run2")
    (println "********************")
    (print "(((((curry (lambda (w x y z) (* (+ w x) y z))) 1) 2) 3) 4)) gives: ")
    (println (((((curry (lambda (w x y z) (* (+ w x) y z))) 1) 2) 3) 4))
    (print "((lambda (w x y z) (* (+ w x) y z)) 1 2 3 4)) gives: ")
    (println ((lambda (w x y z) (* (+ w x) y z)) 1 2 3 4))
    (println "---should both be 36")
    (println)
    )

(define (run3)
    (println)
    (println "run3")
    (println "********************")
    (println "incrementing zero 
    <=> defining one (increment zero)
    <=> defining one as
        (lambda (incrementer)
            (define (resolver base)
                (incrementer ((zero incrementer) base))
                )
            resolver
            )

        by definition of increment.

    <=> defining one as
        (lambda (incrementer)
            (define (resolver base)
                (incrementer (identity base))
                )
            resolver
            )

        since zero returns the identity function, regardless of argument.

    <=> defining one as
        (lambda (incrementer)
            (define (resolver base)
                (incrementer base)
                )
            resolver
            )

        by definition of identity. ::")

    (println "(add two three) is " (translate (add two three)))
    (println "(add zero zero) is " (translate (add zero zero)))
    (println)
    )
;(println (((add one zero) inc) base))
;(println (translate(add one zero)))
 
(define (run4)
    (println)
    (println "run4")
    (println "********************")
    (println)
    (inspect (node 1 'None 'None))
    (inspect (nodeCount (node 1 'None 'None)))
    (println "---should be 1")
    (inspect (node 2 (node 1) (node 1 'None 'None)))
    (inspect (nodeCount (node 2 (node 1) (node 1 'None 'None))))
    (println "---should be 3")
    (inspect (node 2 (node 3 (node 1 'None 'None) 'None) (node 1 'None 'None)))
    (inspect (nodeCount (node 2 (node 3 (node 1 'None 'None) 'None) (node 1 'None 'None))))
    (println "---should be 4")
    (inspect 'None)
    (inspect (nodeCount 'None))
    (println "---should be 0")
    (println)
    )

(define (run5)
    (println)
    (println "run5")
    (println "********************")
    (println)
    (println "((1 2 3) (4 5 6)) * (1 2)) is: " (matrix-*-vector '((1 2 3) (4 5 6)) '(1 2)))
    (println "---should be (9 12 15)")
    (println "((1 0 0) (0 1 0) (0 0 1)) * ((1 4 6) (2 3 5)) is: " (matrix-*-matrix '((1 0 0) (0 1 0) (0 0 1)) '((1 4 6) (2 3 5))))
    (println "---should be ((1 4 6) (2 3 5))")
    (println "transpose of ((3 2 1) (4 1 0)) is: " (transpose '((3 2 1) (4 1 0))))
    (println "---should be ((3 4) (2 1) (1 0))")
    (println)
    )

(define (run6)
    (println)
    (println "run6")
    (println "********************")
    (println)
    (println "(tuple 1 0) is: " (tuple 1 0))
    (println "---should be ((0))")
    (println "(tuple 1 1) is: " (tuple 1 1))
    (println "---should be ((0) (1))")
    (println "(tuple 2 0) is: " (tuple 2 0))
    (println "---should be ((0 0))")
    (println "(tuple 2 2) is: " (tuple 2 2))
    (println "---should be ((0 0) (0 1) (1 1) (0 2) (1 2) (2 2))")
    (println "(tuple 2 3) is: " (tuple 2 3))
    (println "---should be ((0 0) (0 1) (1 1) (0 2) (1 2) (2 2) (0 3) (1 3) (2 3) (3 3))")
    (println "(tuple 0 0) is: " (tuple 0 0))
    (println "---should be ()")
    (println "(tuple 0 3) is: " (tuple 0 3))
    (println "---should be ()")
    (println "(tuple 3 1) is: " (tuple 3 1))
    (println "---should be ((0 0 0) (0 0 1) (0 1 1) (1 1 1))")
    (println)
    )

(define (run7)
    (println)
    (println "run7")
    (println "********************")
    (println)
    (inspect (infix->prefix '(2 + 3 * x ^ 5 + a)))
    (println "---should be (+ 2 (+ (* 3 (^ x 5)) a))")
    (inspect (infix->prefix '(x ^ 5 ^ 8 ^ y)))
    (println "---should be (^ (^ (^ x 5) 8) y)")
    (inspect (infix->prefix '(x + z)))
    (println "---should be (+ x z)")
    (inspect (infix->prefix '(y - u - 1)))
    (println "---should be (- y (- u 1))")
    (inspect (infix->prefix '(x)))
    (println "---should be x")
    (inspect (infix->prefix '()))
    (println "---should be ()")
    (println)
    )

(define (run8)
    (println)
    (println "run8")
    (println "********************")
    (println)
    (inspect ((cxr 'add) '(1 2 3 4 5 6)))
    (println "---should be 3")
    (inspect ((cxr 'dad) '(1 (2 3))))
    (println "---should be (3)")
    (println ((cxr 'ada) '((1 (0 1)))))
    (println "---should be (0 1)")
    (println)
    )

(define (run9)
    (println)
    (println "run9")
    (println "********************")
    (println)
    (println "'a' - 'aa': " (- "a" "aa"))
    (println "---should be a")
    (println "'aa' - 'a': " (- "aa" "a"))
    (println "---should be a")
    (println "'a' - 'zzzzzzzzzz': " (- "a" "zzzzzzzzzz"))
    (println "---should be the difference is unknown to us")
    (println "'c' - 'ba': " (- "c" "ba"))
    (println "---should be there is no difference")
    (println "'hello' - 'hi': " (- "hello" "hi"))
    (println "'zoo' - 'cube': " (- "zoo" "cube"))
    (println)
    (println "numeric rendering of 'y' is: " (word2int "y"))
    (println "---should be 25")
    (println "numeric rendering of 'aa' is: " (word2int "aa"))
    (println "---should be 2")
    (println "numeric rendering of 'zoo' is: " (word2int "zoo"))
    (println "---should be 56")
(define (run10)
    (inspect (((+ (Integer 9) (Complex 2 4)) 'toString)))
    (println "---should be 11.000000+4.000000*i") 
    (inspect (((+ (Rational 10 2) (Integer 5)) 'toString)))
    (println "---should be 10/1")
    (inspect (((Real .000090) 'value)))
    (println "---should be 0.000090")
    (inspect (((Real .000090) 'toString)))
    (println "---should be 0.000090")
    (inspect (((+ (Real .09) (Rational 3 5)) 'toString)))
    (println "---should be 0.690000")
    (inspect (((+ (Real .09) (Rational 3 5)) 'value)))
    (println "---should be 0.690000")
    (inspect (((((Integer 9) 'promote)) 'toString)))
    (println "---should be 9/1")
    (inspect (((((Rational 9 2) 'promote)) 'toString)))
    (println "---should be 4.500000")
    (inspect (((((Real 1.78) 'promote)) 'toString)))
    (println "---should be 1.780000+0.000000*i")
    (inspect (((((Complex 3 4) 'promote)) 'toString)))
    (println "---should be 3.000000+4.000000*i")
    (inspect (((((Complex 3 4) 'demote)) 'toString)))
    (println "---should be 5.000000")
    (inspect (((((Real 1.78) 'demote)) 'toString)))
    (println "---should be 89/50")
    (inspect (((((Rational 5 6) 'demote)) 'toString)))
    (println "---should be 0")
    (inspect (((((Integer 1) 'demote)) 'toString)))
    (println "---should be 1")
    (inspect (((Real -20000) 'toString)))
    (println "---should be -20000.000000")
    (inspect (((Rational 8 -2) 'toString)))
    (println "---should be -4/1")
    (inspect (((Real -10) 'toString)))
    (println "---should be -10.000000")
    (inspect (((+ (Rational -9 -1)(Real -10)(Complex -0.9 -2.5)) 'toString)))
    (println "---should be -1.900000-2.500000*i")
    (inspect (((((((((Complex -0.78 1.909) 'demote)) 'demote)) 'demote)) 'value)))
    (println "---should be 2")
    (inspect (((((((((Real -1.00001) 'demote)) 'demote)) 'demote)) 'value)))
    (println "---should be -1")
    )        

; --> TESTS
;(inspect (diff "hello" "hi"))
;(inspect (tuple 2 3))
;(run1)
;(run2)
;(run3)
;(run4)
;(run5)
;(run6)
;(run7)
;(run8)
;(run9)
;(run10)
;(inspect (diff "aaaa" "a"))
;(inspect ((cxr 'add) '(1 2 3 4 5 6)))
;(inspect (infix->prefix '(2 + 3 * x ^ 5 + a)))
(println "assignment 2 loaded!")

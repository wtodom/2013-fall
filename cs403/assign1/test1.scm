(include "assign1.scm")

(println "Test Script: VERSION 1\n")

(println "author...\n")
(author)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (println "    No testing for this task\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (inspect (zeno_cost 200 0 0.5))
        (println "    [it should be 0]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (inspect (cym 0))
        (println "    [it should be #FFFFFF]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (inspect (root12 1))
        (println "    [it should be 1]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )


(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (println "(pt 0)")
        (pt 0)
        (println "    [it should be 1]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (define (f x y z) (+ x y z)))
        (inspect ((((curry f) 0) 0) 0))
        (println "    [it should be 0]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (inspect (define (f x) x))
        (inspect (zorp 0 f))
        (println "    [it should be 0]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect (babyl* 1 1))
        (println "    [it should be 1]\n")
        (inspect (halve 2))
        (println "    [it should be 1]\n")
        (inspect (square 1))
        (println "    [it should be 1]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (inspect (mystery 0))
        (println "    [it should be 1.000000]\n")
        (inspect (imystery 0))
        (println "    [it should be 1.000000]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )

(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests---------------------\n")
        (inspect (ramanujan 0))
        (println "    [it should be 1.000000]\n")
        (inspect (iramanujan 0))
        (println "    [it should be 1.000000]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )
(author)

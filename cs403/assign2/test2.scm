(include "assign2.scm")

(println "Test Script: VERSION 1\n")

(println "author...\n")
(author)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests of your code--------\n")
        (inspect (check-and-go 1 nil))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests of your code--------\n")
        (inspect (define (f a b c) (+ a b c)))
        (inspect ((((curry f) 1) 2) 3))
        (println "    [it should be 6]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests of your code--------\n")
        (inspect (translate zero))
        (println "    [it should be zero]]")
        (inspect (increment zero))
        (println "    [it should be an anonymous incrementer function]")
        (inspect (add one two))
        (println "    [it should be an anonymous incrementer function]")
        (println)
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests of your code--------\n")
        (inspect (nodeCount (node 0)))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests of your code--------\n")
        (inspect (dot-product '(1 2) '(3 4)))
        (println "    [it should be 11]")
        (inspect (matrix-*-vector '((1 2) (3 4)) '(5 6)))
        (println "    [it should be (23 34)]")
        (inspect (transpose '((1 2) (3 4))))
        (println "    [it should be ((1 3) (2 4))]")
        (inspect (matrix-*-matrix '((1 2) (3 4)) '((1 0) (0 1))))
        (println "    [it should be ((1 3) (2 4))]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests of your code--------\n")
        (inspect (tuple 1 2))
        (println "    [it should be ((0) (1) (2))]")
        )
    (println " NOT IMPLEMENTED\n")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests of your code--------\n")
        (inspect (infix->prefix '(3 + 2)))
        (println "    [it should be (+ 3 2)]")
        )
    (println " NOT IMPLEMENTED\n")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests of your code--------\n")
        (inspect ((cxr 'add) '(1 2 3 4 5 6)))
        (println "    [it should be 3]")
        )
    (println " NOT IMPLEMENTED\n")
    )
(println)


(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests of your code--------\n")
        (inspect (word2int "love"))
        (println "    [it should be 54]")
        (inspect (word2int (- "love" "hate")))
        (println "    [it should be 20]")
        (inspect (word2int (diff "love" "hate")))
        (println "    [it should be 20]")
        (inspect (- 5 3))
        (println "    [it should be 2]")
        )
    (println " NOT IMPLEMENTED\n")
    )
(println)

(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests of your code--------\n")
        (inspect ((Integer 0)'toString))
        (println "    [it should be 0]\n")
        (inspect (((Integer 0)'rank)))
        (println "    [it should be a number]\n")
        (inspect (((+ (Integer 0) (Integer 0) (Integer 0))'value)))
        (println "    [it should be 0]\n")
        (inspect (+ 3 5 1))
        (println "    [it should be 9]\n")
        )
    (println " NOT IMPLEMENTED\n")
    )
(author)
